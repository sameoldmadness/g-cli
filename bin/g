#!/bin/bash
VERSION="1.0.0"

log() {
  printf "  \033[36m%10s\033[0m : \033[90m%s\033[0m\n" $1 $2
}

abort() {
  printf "\n  \033[31mError: $@\033[0m\n\n" && exit 1
}

hide_cursor() {
  printf "\e[?25l"
}

show_cursor() {
  printf "\e[?25h"
}

enter_fullscreen() {
  tput smcup
  hide_cursor
  stty -echo
}

leave_fullscreen() {
  show_cursor
  tput rmcup
  stty echo
}

refresh_fullscreen() {
  clear
}

test `command -v git` || abort "git required"

handle_sigcont() {
  display_branch
}

handle_sigint() {
  leave_fullscreen
  exit $?
}

handle_sigtstp() {
  leave_fullscreen
  kill -s SIGSTOP $$
}

trap handle_sigtstp SIGTSTP
trap handle_sigint SIGINT
trap handle_sigcont SIGCONT

display_help() {
  cat <<-EOF

  Usage: g [options] [COMMAND]

  Commands:

    g               Output local branches installed

  Options:

    -v, --version   Output current version of g
    -h, --help      Display help information
    -r, --remote    Create local branch from remote

EOF
  exit 0
}

display_version() {
  echo $VERSION && exit 0
}

local_branches() {
  test `current_branch` || current_head
  git for-each-ref --format='%(refname:short)' refs/heads
}

current_branch() {
  git symbolic-ref --short -q HEAD
}

current_head() {
  git rev-parse --short HEAD
}

check_current_branch() {
  active=`current_branch` || active=`current_head`
}

display_local_branches_with_selected() {
  selected=$1
  echo
  for version in `local_branches`; do
    if test "$version" = "$selected"; then
      printf "  \033[36mο\033[0m $version\033[0m\n"
    else
      printf "    \033[90m$version\033[0m\n"
    fi
  done
  echo
}

display_remote_branches_with_selected() {
  selected=$1
  local i=0
  echo
  for version in $remote_branches; do
    [ -z "${selected}" ] && selected=$version
    if [ "$version" = "$selected" ]; then
      printf "  \033[36mο\033[0m $version\033[0m\n"
    else
      printf "    \033[90m$version\033[0m\n"
    fi
    i=$((i+1))
  done
  echo
}

next_local_branch() {
  local_branches | grep -x $selected -A 1 | tail -n 1
}

prev_local_branch() {
  local_branches | grep -x $selected -B 1 | head -n 1
}

next_remote_branch() {
  echo "$remote_branches" | grep -x $selected -A 1 | tail -n 1
}

prev_remote_branch() {
  echo "$remote_branches" | grep -x $selected -B 1 | head -n 1
}

activate() {
  local version=$1
  check_current_branch
  if test "$version" != "$active"; then
    git checkout $version
  fi
}

create_from_remote() {
  git checkout -b $1 origin/$1
}

read_key()
{
  local kp
  ESC=$'\e'
  _KEY=
  read -d '' -n1 _KEY
  case $_KEY in
    "$ESC")
        while read -d '' -n1 -t0.1 kp
        do
          _KEY=$_KEY$kp
          case $kp in
            [a-zA-NP-Z~]) break;;
          esac
        done
    ;;
  esac
  case $_KEY in
    $'\e[11~' | $'\e[OP') key=F1 ;;
    $'\e[12~' | $'\e[OQ') key=F2 ;;
    $'\e[13~' | $'\e[OR') key=F3 ;;
    $'\e[14~' | $'\e[OS') key=F4 ;;
    $'\e[15~') key=F5 ;;
    $'\e[16~') key=F6 ;;
    $'\e[17~') key=F7 ;;
    $'\e[18~') key=F8 ;;
    $'\e[19~') key=F9 ;;
    $'\e[20~') key=F10 ;;
    $'\e[21~') key=F11 ;;
    $'\e[22~') key=F12 ;;
    $'\e[A' ) key=UP ;;
    $'\e[B' ) key=DOWN ;;
    $'\e[C' ) key=RIGHT ;;
    $'\e[D' ) key=LEFT ;;
    $'\e' ) key=ESC ;;
    ?) key=$_KEY ;;
    *)
      if [ `printf %x "'$_KEY"` = 0 ]
      then
        key='ENTER_OR_SPACE'
      else
        key=???
      fi
    ;;
  esac
}

display_local_branches() {
  enter_fullscreen
  check_current_branch
  display_local_branches_with_selected $active
  while true; do
    read_key
    case "$key" in
      w|W|UP)
        refresh_fullscreen
        display_local_branches_with_selected $(prev_local_branch)
      ;;
      s|S|DOWN)
        refresh_fullscreen
        display_local_branches_with_selected $(next_local_branch)
      ;;
      d|D|RIGHT|ENTER_OR_SPACE)
        leave_fullscreen
        activate $selected
        exit
      ;;
      a|A|q|Q|LEFT|ESC)
        leave_fullscreen
        exit
      ;;
    esac
  done
}

display_remote_branches() {
  enter_fullscreen
  remote_branches="`git ls-remote --heads origin | cut -f2 | cut -d/ -f3-`"
  display_remote_branches_with_selected
  while true; do
    read_key
    case "$key" in
      w|W|UP)
        refresh_fullscreen
        display_remote_branches_with_selected $(prev_remote_branch)
      ;;
      s|S|DOWN)
        refresh_fullscreen
        display_remote_branches_with_selected $(next_remote_branch)
      ;;
      d|D|RIGHT|ENTER_OR_SPACE)
        leave_fullscreen
        create_from_remote $selected
        exit
      ;;
      a|A|q|Q|LEFT|ESC)
        leave_fullscreen
        exit
      ;;
    esac
  done
}

if test $# -eq 0; then
  display_local_branches
else
  while test $# -ne 0; do
    case $1 in
      -v|--version|version) display_version ;;
      -h|--help|help) display_help ;;
      -r|--remote|remote) display_remote_branches ;;
    esac
    shift
  done
fi